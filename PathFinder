
    fun getMinHops(totalCompt: Int,
                   thresholdsList: ArrayList<Int>,
                   thesisIn: Int): Int{
        var noOfHops = 1
        var currentCompt = 1
        val thresholdInCompt = thresholdsList.get(currentCompt-1)
        if((thesisIn-1) - thresholdInCompt > 0) {
            for(i in 1 until totalCompt-1){
                val comptOfHighestThreshold = getNextCompt(thresholdsList, currentCompt, thresholdsList.get(currentCompt - 1))
                currentCompt = comptOfHighestThreshold+1
                if(thesisIn - currentCompt <= 0){
                    break
                }
                noOfHops++
            }
        }
        Log.i("test result", "$noOfHops")
        return noOfHops
    }

    private fun getNextCompt(thresholdsList: ArrayList<Int>,
                     currentCompt: Int,
                     thresholdInComp: Int): Int{
        var highestThreshold = 0
        var comptOfHighestThreshold = 0
        for(compt in currentCompt until (currentCompt + thresholdInComp)){   // 2 3 1 1 3 2 3 1 1 3
            if(thresholdsList.get(compt) >= highestThreshold){
                highestThreshold = thresholdsList[compt]
                comptOfHighestThreshold = compt
                Log.i("test", "$highestThreshold and index is $compt")
            }
        }
        return comptOfHighestThreshold
    }
